#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 28 11:53:58 2020

@author: rguerra
"""

import sys
import os
from PyQt5 import QtCore, QtWidgets, uic
import cli
import log2df

qtcreator_file = "mrGUI.ui"
Ui_MainWindow, QtBaseClass = uic.loadUiType(qtcreator_file)
Ui_createFileWin, createFileClass = uic.loadUiType("createFile.ui")

class MyWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    
    def __init__(self):
        # set up window from UI files and Qt Widget defs
        QtWidgets.QMainWindow.__init__(self)
        Ui_MainWindow.__init__(self)
        self.setupUi(self)
       #! self.logTable()
        # connects "Enter" button signal to setFilename method for user specification of XML file to open
        self.fileEnterButton.clicked.connect(self.setFilename)
        # connects "log2df" button signal to logTable method for creation of data frame from XML and displaying in table view
        self.log2dfButton.clicked.connect(self.logTable)
        
    def setFilename(self):       
        # read-in filename from text box to persistent global variable
        global logFilename 
        logFilename = format(self.fileNameBox.text())
        if not os.path.isfile(logFilename):
            # if file does not exist, prompt user to create
            createFile()
        else:
            self.openFile()
 
    def logTable(self):
        # create dataframe object from the XML log object generated by the monthlyReport program
        self.logDf = log2df.lg2df(self.logObj)
        # create a table model from the dataframe
        self.model = entryModel(self.logDf)
        # instantiate the table view from the UI file
        self.entTabl = QtWidgets.QTableView(self.entryTable)
        # adjust the table view dimensions using Qt 5 command not available in Qt Designer 4.8.7
        self.entTabl.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        # insert to model into the view
        self.entTabl.setModel(self.model)
        # set the view to resize column headers to contents automagically
        self.entTabl.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        # show the table in the window
        self.entTabl.show()
        
        
    def openFile(self):
        # Read log file into persistent log object
        self.logObj = cli.ReportCli.createReportLog('',logFilename)
        self.LogEntryDef = self.logObj.getLogEntryDef()
        #!self.logObj.printLog()
        #!print(logFilename)
               
class entryModel(QtCore.QAbstractTableModel):
    # pandas dataframe Qt table model for insertion into table view via model/view architecture
    # QAbstractTableModel requires at minimum the following methods: init, rowCount, columnCount, data
    # for editable tables, must also include flags, setData, headerData methods
    # currrently will update the view with whatever user inputs, but does not update the underlying data frame
    # nor does it save changes back to the XML file ; will implement as delegate 
    def __init__(self, data):
        QtCore.QAbstractTableModel.__init__(self)
        self._data = data
    def rowCount(self, parent=None):
        return self._data.shape[0]
    def columnCount(self, parnet=None):
        return self._data.shape[1]
    def data(self, index, role=QtCore.Qt.DisplayRole):
        if index.isValid():
            if role == QtCore.Qt.DisplayRole:
                return str(self._data.iloc[index.row(), index.column()])
        return None
    def flags(self, index):
        original_flags = super(entryModel, self).flags(index)
        return original_flags | QtCore.Qt.ItemIsEditable | QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable
    def setData(self, index, value, role):
        if not index.isValid():
            return False
        if role != QtCore.Qt.EditRole:
            return False
        row = index.row()
        if row < 0 or row >= len(self._data.values):
            return False
        column = index.column()
        if column < 0 or column >= self._data.columns.size:
            return False
        self._data.values[row][column] = value
        self.dataChanged.emit(index,index)
        return True
    def headerData(self, col, orientation, role):
        if orientation == QtCore.Qt.Horizontal and role == QtCore.Qt.DisplayRole:
            return self._data.columns[col]
        return None  

class createFile(QtWidgets.QDialog, Ui_createFileWin):
    # class and methods for creating new report log object if supplied filename does not exist
    # creates a dialog pop-up with yes/no buttons
    def __init__(self):    
        QtWidgets.QDialog.__init__(self)
        Ui_createFileWin.__init__(self)
        self.setupUi(self)
        self.mkFileChoiceButton.accepted.connect(self.accept)
        self.mkFileChoiceButton.rejected.connect(self.reject)
        r = self.exec()
        if r == 1:
            print("yes")
            MyWindow.openFile(self)
        elif r == 0:
            print("no")
            return
        
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)   
    window = MyWindow()
    window.show()
    sys.exit(app.exec_())
